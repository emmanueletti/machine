# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/bookworm64"
  config.vm.hostname = "devbox"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network :forwarded_port, host: 5432, guest: 5432 # postgres
  # config.vm.network :forwarded_port, host: 3000, guest: 3000 # rails

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1", guest_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 3000, host: 3000, host_ip: "127.0.0.1", guest_ip: "127.0.0.1" # rails
  config.vm.network "forwarded_port", guest: 3000, host: 3000, host_ip: "10.0.2.2", guest_ip: "10.0.2.2" # rails browser console
  config.vm.network "forwarded_port", guest: 5432, host: 5432, host_ip: "127.0.0.1", guest_ip: "127.0.0.1" # postgres

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../dotfiles", "/vagrant_data/dotfiles"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true

    # Customize VM resources:
    vb.memory = "8192"
    vb.cpus = "2"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "file", source: "./dotfiles", destination: "/home/vagrant"
  config.vm.provision "shell", privileged: false, inline: <<~SHELL
    sudo apt-get update
    sudo apt-get -y install build-essential

    # Install core tools
    sudo apt-get -y install git
    sudo apt-get -y install tmux
    sudo apt-get -y install vim
    sudo apt-get -y install curl
    sudo apt-get -y install jq

    # Install dependencies needed to build Ruby
    sudo apt-get -y install autoconf
    sudo apt-get -y install patch
    sudo apt-get -y install build-essential
    sudo apt-get -y install rustc
    sudo apt-get -y install libssl-dev
    sudo apt-get -y install libyaml-dev
    sudo apt-get -y install libreadline6-dev
    sudo apt-get -y install zlib1g-dev
    sudo apt-get -y install libgmp-dev
    sudo apt-get -y install libncurses5-dev
    sudo apt-get -y install libffi-dev
    sudo apt-get -y install libgdbm6
    sudo apt-get -y install libgdbm-dev
    sudo apt-get -y install libdb-dev
    sudo apt-get -y install uuid-dev

    # Install NodeJS (Required for Rails)
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash
    source ~/.nvm/nvm.sh
    nvm install --lts

    # Install rbenv and ruby-build
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv
    echo 'eval "$(~/.rbenv/bin/rbenv init - bash)"' >> ~/.bashrc
    eval "$(~/.rbenv/bin/rbenv init - bash)"
    source ~/.bashrc
    git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build

    # Install data stores
    sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    sudo apt-get -y install postgresql
    sudo apt-get -y install libpq-dev

    sudo apt-get -y install sqlite3

    # Install Ruby on Rails environment
    rbenv install --verbose 3.2.2
    rbenv global 3.2.2
    gem install bundler
    gem install rails
    gem install pg
    gem install solargraph
    rbenv rehash

    # Configure postgres
    sudo -u postgres createuser vagrant -s && sudo -u postgres createdb vagrant

    # Configure developer experience
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && sudo apt-get update \
    && sudo apt-get install gh -y
  SHELL
end
